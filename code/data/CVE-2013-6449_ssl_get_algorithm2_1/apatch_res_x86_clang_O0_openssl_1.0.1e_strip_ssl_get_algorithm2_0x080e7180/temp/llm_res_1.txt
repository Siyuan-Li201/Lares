 I'll analyze the source code and pseudo code to identify the corresponding patch codes and locate codes in the pseudo code.
> 🔍 ***ssl_get_algorithm2 TLS1_2_VERSION TLS1_PRF openssl***

> 🔗 [SSL/TLS Client - Ope](https://wiki.openssl.org/index.php/SSL/TLS_Client)
> 🔗 [encryption - Find SS](https://stackoverflow.com/questions/40064403/find-ssl-version-after-handshake-in-openssl)
> 🔗 [Check supported TLS ](https://blog.toshima.ru/2020/01/06/check-supported-tls-version.html)
> 🔗 [SSL and TLS Protocol](https://wiki.openssl.org/index.php/SSL_and_TLS_Protocols)
> 🔗 [encryption - How are](https://security.stackexchange.com/questions/65937/how-are-tlsv1-0-ciphers-negotiated-as-tlsv1-2)
> 🔗 [tls1.2 - When was TL](https://stackoverflow.com/questions/48178052/when-was-tls-1-2-support-added-to-openssl)
> 🔗 [Test TLS Connection ](https://djangocas.dev/blog/test-tls-connectivity-with-openssl/)
> 🔗 [TLS handshakes succe](https://github.com/openssl/openssl/discussions/24538)
> 🔗 [Checking the TLS Ver](https://www.baeldung.com/linux/tls-version-required-by-host)
> 🔗 [linux - How can I ve](https://serverfault.com/questions/638691/how-can-i-verify-if-tls-1-2-is-supported-on-a-remote-web-server-from-the-rhel-ce)



After analyzing the source code and pseudo code, I'll identify the matching patch codes and locate codes in the pseudo code.

The `ssl_get_algorithm2` function deals with TLS version checking and algorithm selection. Based on the information from the search results, I can now match the patch codes with the corresponding pseudo code.

```json
{
    "new match result":{
        "long ssl_get_algorithm2(SSL *s)  //patch_code": ["int __cdecl sub_80E7180(int *a1) // 1"],
        "if (s->method->version == TLS1_2_VERSION &&  //patch_code": ["if ( v2 >= 771 && *(_DWORD *)(*(_DWORD *)(a1[22] + 836) + 36) == 49200 ) // 10"],
        "alg2 == (SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF))  //patch_code": ["*(_DWORD *)(*(_DWORD *)(a1[22] + 836) + 36) == 49200 ) // 10"],
        "return SSL_HANDSHAKE_MAC_SHA256 | TLS1_PRF_SHA256;  //patch_code": ["v3 = 131200; // 11"],
        "return alg2;  //patch_code": ["return v3; // 14"]
    },
    "corresponding pseudo code": "int __cdecl sub_80E7180(int *a1) // 1\n{ // 2\n  int v2; // [esp+0h] [ebp-10h] // 3\n  int v3; // [esp+Ch] [ebp-4h] // 4\n // 5\n  if ( *a1 >> 8 == 3 ) // 6\n    v2 = *a1; // 7\n  else // 8\n    v2 = 0; // 9\n  if ( v2 >= 771 && *(_DWORD *)(*(_DWORD *)(a1[22] + 836) + 36) == 49200 ) // 10\n    v3 = 131200; // 11\n  else // 12\n    v3 = *(_DWORD *)(*(_DWORD *)(a1[22] + 836) + 36); // 13\n  return v3; // 14\n} // 15"
}
```