 I'll analyze the source code and pseudo code to identify the matching patch codes and locate codes in the pseudo code.

Looking at this carefully, I can identify the corresponding parts between the source code and the decompiled pseudo code.

```json
{
    "new match result": {
        "long ssl_get_algorithm2(SSL *s)  //patch_code": ["int __cdecl sub_80E7110(int a1) // 1"],
        "if (s->method->version == TLS1_2_VERSION &&  //patch_code": ["if ( **(_DWORD **)(a1 + 8) == 771 && *(_DWORD *)(*(_DWORD *)(*(_DWORD *)(a1 + 88) + 836) + 36) == 49200 ) // 5"],
        "alg2 == (SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF))  //patch_code": ["*(_DWORD *)(*(_DWORD *)(*(_DWORD *)(a1 + 88) + 836) + 36) == 49200 ) // 5"],
        "return SSL_HANDSHAKE_MAC_SHA256 | TLS1_PRF_SHA256;  //patch_code": ["v2 = 131200; // 6"],
        "return alg2;  //patch_code": ["v2 = *(_DWORD *)(*(_DWORD *)(*(_DWORD *)(a1 + 88) + 836) + 36); // 8", "return v2; // 9"]
    },
    "corresponding pseudo code": "int __cdecl sub_80E7110(int a1) // 1\n{ // 2\n  int v2; // [esp+8h] [ebp-4h] // 3\n // 4\n  if ( **(_DWORD **)(a1 + 8) == 771 && *(_DWORD *)(*(_DWORD *)(*(_DWORD *)(a1 + 88) + 836) + 36) == 49200 ) // 5\n    v2 = 131200; // 6\n  else // 7\n    v2 = *(_DWORD *)(*(_DWORD *)(*(_DWORD *)(a1 + 88) + 836) + 36); // 8\n  return v2; // 9\n} // 10"
}
```