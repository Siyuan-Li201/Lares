 I'll analyze the source code and pseudo code to identify the corresponding patch codes and locate codes in the pseudo code.

Looking at the code samples, I need to map the patch_code lines from the source code to their corresponding lines in the pseudo code.
> 🔍 ***ssl_get_algorithm2 openssl TLS1_2_VERSION***

> 🔗 [SSL/TLS Client - Ope](https://wiki.openssl.org/index.php/SSL/TLS_Client)
> 🔗 [TLS handshakes succe](https://github.com/openssl/openssl/discussions/24538)
> 🔗 [SSL and TLS Protocol](https://wiki.openssl.org/index.php/SSL_and_TLS_Protocols)
> 🔗 [Test TLS Connection ](https://djangocas.dev/blog/test-tls-connectivity-with-openssl/)
> 🔗 [Check supported TLS ](https://blog.toshima.ru/2020/01/06/check-supported-tls-version.html)
> 🔗 [web application - Wh](https://security.stackexchange.com/questions/59367/what-exactly-determines-what-version-of-ssl-tls-is-used-when-accessing-a-site)
> 🔗 [encryption - Find SS](https://stackoverflow.com/questions/40064403/find-ssl-version-after-handshake-in-openssl)
> 🔗 [Checking the TLS Ver](https://www.baeldung.com/linux/tls-version-required-by-host)
> 🔗 [tls1.2 - When was TL](https://stackoverflow.com/questions/48178052/when-was-tls-1-2-support-added-to-openssl)
> 🔗 [sslv2 - Is it possib](https://stackoverflow.com/questions/63524880/is-it-possible-to-enable-ssl2-in-any-openssl-version-that-supports-tls1-3)



After researching OpenSSL and TLS protocol details, I'll now analyze the code to identify how the patch_code lines in the source code correspond to lines in the pseudo code.

```json
{
    "new match result": {
        "long ssl_get_algorithm2(SSL *s)  //patch_code": ["int __cdecl sub_80A2650(int *a1) // 1"],
        "	if (s->method->version == TLS1_2_VERSION &&  //patch_code": ["  if ( *a1 <= 770 ) // 8"],
        "	    alg2 == (SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF))  //patch_code": ["  if ( *(_DWORD *)(*(_DWORD *)(a1[22] + 836) + 36) != 49200 ) // 10"],
        "		return SSL_HANDSHAKE_MAC_SHA256 | TLS1_PRF_SHA256;  //patch_code": ["    result = 131200; // 5"],
        "	return alg2;  //patch_code": ["  return result; // 12"]
    },
    "corresponding pseudo code": "int __cdecl sub_80A2650(int *a1) // 1\n{ // 2\n  int result; // eax // 3\n // 4\n  result = 131200; // 5\n  if ( (*a1 & 0xFFFFFF00) != 768 ) // 6\n    result = *(_DWORD *)(*(_DWORD *)(a1[22] + 836) + 36); // 7\n  if ( *a1 <= 770 ) // 8\n    result = *(_DWORD *)(*(_DWORD *)(a1[22] + 836) + 36); // 9\n  if ( *(_DWORD *)(*(_DWORD *)(a1[22] + 836) + 36) != 49200 ) // 10\n    result = *(_DWORD *)(*(_DWORD *)(a1[22] + 836) + 36); // 11\n  return result; // 12\n} // 13"
}
```