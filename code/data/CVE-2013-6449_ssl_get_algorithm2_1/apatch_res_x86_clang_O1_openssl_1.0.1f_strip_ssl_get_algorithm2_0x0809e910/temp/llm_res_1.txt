 I'll analyze the source code and pseudo code to identify the matching lines. Let me break this down systematically.
> 🔍 ***SSL_HANDSHAKE_MAC_DEFAULT TLS1_PRF crypto code***

> 🔗 [openssl/providers/im](https://github.com/openssl/openssl/blob/master/providers/implementations/kdfs/tls1_prf.c)
> 🔗 [RFC 5246 - The Trans](https://tools.ietf.org/html/rfc5246)
> 🔗 [Transport Layer Secu](https://en.wikipedia.org/wiki/Transport_Layer_Security)
> 🔗 [openssl/doc/man3/EVP](https://github.com/openssl/openssl/blob/master/doc/man3/EVP_PKEY_CTX_set_tls1_prf_md.pod)
> 🔗 [A Cryptographic Anal](https://eprint.iacr.org/2020/1044.pdf)
> 🔗 [TLS PRF key derivati](https://mbed-tls.readthedocs.io/en/latest/kb/how-to/tls_prf/)
> 🔗 [tls - TLS1.3 encrypt](https://crypto.stackexchange.com/questions/47423/tls1-3-encrypted-handshake)
> 🔗 [Rehash: How to Fix t](https://www.thesslstore.com/blog/tls-handshake-failed/)
> 🔗 [TLS security - Apple](https://support.apple.com/guide/security/tls-security-sec100a75d12/web)
> 🔗 [otp/lib/ssl/src/tls_](https://github.com/erlang/otp/blob/master/lib/ssl/src/tls_v1.erl)



Based on the search results and my understanding of the OpenSSL codebase, I can analyze the relationship between the source code and pseudocode. Let me identify the patch codes and locate them in the pseudo code.

The main task here is to map the patched source code lines to their corresponding decompiled pseudocode lines. Let me analyze this systematically:

```json
{
    "new match result": {
        "long ssl_get_algorithm2(SSL *s)  //patch_code": ["int __cdecl sub_809E910(int a1) // 1"],
        "if (s->method->version == TLS1_2_VERSION &&  //patch_code": ["if ( **(_DWORD **)(a1 + 8) ^ 0x303 | *(_DWORD *)(*(_DWORD *)(*(_DWORD *)(a1 + 88) + 836) + 36) ^ 0xC030 ) // 6"],
        "alg2 == (SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF))  //patch_code": ["*(_DWORD *)(*(_DWORD *)(*(_DWORD *)(a1 + 88) + 836) + 36) ^ 0xC030 ) // 6"],
        "return SSL_HANDSHAKE_MAC_SHA256 | TLS1_PRF_SHA256;  //patch_code": ["result = *(_DWORD *)(*(_DWORD *)(*(_DWORD *)(a1 + 88) + 836) + 36); // 7"],
        "return alg2;  //patch_code": ["return result; // 8"]
    },
    "corresponding pseudo code": "int __cdecl sub_809E910(int a1) // 1\n{ // 2\n  int result; // eax // 3\n // 4\n  result = 131200; // 5\n  if ( **(_DWORD **)(a1 + 8) ^ 0x303 | *(_DWORD *)(*(_DWORD *)(*(_DWORD *)(a1 + 88) + 836) + 36) ^ 0xC030 ) // 6\n    result = *(_DWORD *)(*(_DWORD *)(*(_DWORD *)(a1 + 88) + 836) + 36); // 7\n  return result; // 8\n} // 9"
}
```